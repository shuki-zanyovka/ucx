parameters:
  - name: test_duration
    type: number
    default: 2
  - name: tests
    type: object
    default:
      base:
        initial_delay: 20
        cycles: 100
        downtime: 5
        uptime: 20

jobs:
  - job: io_build
    displayName: Build io_demo

    pool:
      name: MLNX
      demands:
        - ucx_roce -equals yes

    steps:
      # address permissions issue when some files created as read-only
      - bash: chmod u+rwx ./ -R

      - checkout: self
        clean: true
        displayName: Checkout

      - bash: |
          set -eEx

          ./autogen.sh
          ./contrib/configure-release --prefix=$PWD/__install
          make -j`nproc`

          echo "##vso[task.setvariable variable=workspace;isOutput=true]$(Build.Repository.LocalPath)/buildlib"
        displayName: Build
        name: build

  - job: test
    dependsOn: io_build

    pool:
      name: MLNX
      demands:
        - ucx_roce -equals yes

    strategy:
      matrix:
        ${{ each test in parameters.tests }}:
          ${{ test.Key }}:
            test_name: ${{ test.Key }}
            initial_delay: ${{ test.Value.initial_delay }}
            cycles: ${{ test.Value.cycles }}
            downtime: ${{ test.Value.downtime }}
            uptime: ${{ test.Value.uptime }}
      maxParallel: 1

    variables:
      workspace: $[ dependencies.io_build.outputs['build.workspace'] ]

    displayName: "io_demo: "
    steps:
      - checkout: none

      - bash: |
          set -eEx
          # set UCX environment variables
          export UCX_SOCKADDR_CM_ENABLE=y
          # TODO get hostname of 'ucx-roce-client' SSH service endpoint, and run on it
          $(workspace)/../test/apps/iodemo/run_io_demo.sh \
              -H swx-rdmz-ucx-roce-01,swx-rdmz-ucx-roce-02 \
              --tasks-per-node 1 \
              --duration 60 \
              -v \
              --num-clients 1 \
              --num-servers 1 \
              --map-by slot \
              $(workspace)/../test/apps/iodemo/io_demo \
                  -d 512:524288 \
                  -o read,write \
                  -i 0 \
                  -w 16 \
                  -t 10
        displayName: Launch with run_io_demo.sh
        timeoutInMinutes: 2

      - bash: |
          set -eEx
          source ./buildlib/az-helpers.sh
          ./buildlib/az-network-corrupter.sh \
            initial_delay=$(initial_delay) \
            cycles=$(cycles) \
            downtime=$(downtime) \
            uptime=$(uptime) \
            |& add_timestamp &>corrupter.log &

          pgrep -u "$USER" -f 'network-corrupter'
          corrupter_pid=$(pgrep -u "$USER" -f 'network-corrupter')
          echo "corrupter_pid=$corrupter_pid"
          azure_set_variable "corrupter_pid" "$corrupter_pid"
        displayName: Start network corrupter
        timeoutInMinutes: 5

      - bash: |
          set -eEx
          source ./buildlib/az-helpers.sh
          ./buildlib/az-io_demo.sh workspace=$(workspace)
        displayName: Start server
        name: server
        timeoutInMinutes: 5

      - task: SSH@0
        inputs:
          sshEndpoint: ucx-roce-client
          runOptions: inline
          inline: |
            set -eEx
            $(workspace)/az-io_demo.sh \
                workspace=$(workspace) \
                server_ip=$(server_ip)
                duration=${{ parameters.test_duration }}
          failOnStdErr: false
        displayName: Test
        timeoutInMinutes: ${{ parameters.test_duration }}

      - bash: |
          set -eEx
          cd $(workspace)
          pid=$(server_pid)
          echo "Stopping the server, PID=${pid}"
          if ! kill ${pid}; then
            echo "##vso[task.logissue type=error]Can't stop server: process doesn't exist"
            echo "##vso[task.complete result=Failed;]"
          else
            echo "Server stopped successfully"
          fi
          cat $(workspace)/server.log
        displayName: Kill the server
        condition: always()
        timeoutInMinutes: 5

      - bash: |
          set -eEx
          pid=$(corrupter_pid)
          echo "Stopping corrupter, PID=${pid}"
          if ! kill ${pid}; then
            echo "##vso[task.logissue type=warning]Can't stop corrupter: process doesn't exist"
            echo "##vso[task.complete result=Failed;]"
          else
            echo "Corrupter stopped successfully"
          fi
          cat corrupter.log
        displayName: Kill corrupter
        condition: always()
        timeoutInMinutes: 10

      - bash: |
          set -eEx
          ./buildlib/az-network-corrupter.sh reset=yes
        displayName: Restore port state
        condition: always()
        timeoutInMinutes: 1
